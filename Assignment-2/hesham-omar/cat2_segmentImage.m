function [BW,maskedImage] = cat2_segmentImage(RGB)
%segmentImage Segment image using auto-generated code from Image Segmenter app
%  [BW,MASKEDIMAGE] = segmentImage(RGB) segments image RGB using
%  auto-generated code from the Image Segmenter app. The final segmentation
%  is returned in BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 04-May-2023
%----------------------------------------------------


% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);

% Graph cut
foregroundInd = [4854 4855 4856 4857 4858 4859 4860 4982 4989 4990 4991 4992 5111 5121 5122 5123 5239 5252 5368 5382 5383 5494 5495 5496 5497 5498 5512 5513 5622 5623 5642 5643 5644 5751 5773 5879 5880 5903 6008 6032 6033 6136 6137 6162 6163 6264 6265 6292 6293 6392 6393 6422 6423 6520 6521 6552 6648 6649 6682 6776 6777 6811 6812 6900 6901 6902 6903 6904 6905 6906 6941 6942 7023 7024 7025 7026 7027 7028 7033 7034 7035 7036 7037 7071 7151 7152 7200 7201 7280 7281 7330 7406 7407 7408 7459 7460 7533 7534 7535 7589 7660 7661 7662 7718 7719 7787 7788 7789 7848 7913 7914 7915 7977 7978 8003 8040 8041 8042 8107 8132 8133 8134 8168 8169 8236 8263 8264 8295 8296 8297 8366 8390 8393 8394 8395 8407 8408 8409 8410 8411 8412 8413 8414 8415 8416 8417 8418 8422 8423 8497 8525 8526 8536 8542 8543 8544 8548 8549 8550 8648 8655 8656 8657 8665 8674 8675 8676 8759 8760 8777 8786 8787 8792 8889 8890 8906 8916 8917 8918 8920 8921 9019 9036 9149 9165 9278 9294 9295 9407 9424 9536 9553 9665 9682 9794 9812 9923 9941 9942 10052 10071 10182 10200 10311 10329 10440 10459 10569 10588 10698 10828 11086 11215 11344 11345 11474 11604 11621 11733 11750 11862 11992 12009 12121 12122 12138 12251 12267 12380 12396 12509 12510 12525 12639 12654 12769 12782 12783 12898 12911 13028 13040 13157 13168 13169 13286 13297 13415 13426 13544 13545 13555 13684 13803 13813 13932 13942 14061 14071 14199 14328 14448 14457 14577 14586 14706 14715 14844 14964 14973 15093 15102 15222 15231 15350 15360 15479 15489 15608 15618 15737 15747 15866 15876 15994 16004 16005 16123 16133 16252 16262 16380 16391 16509 16520 16637 16648 16765 16766 16893 16894 16906 17019 17020 17035 17164 17274 17275 17293 17399 17400 17401 17402 17403 17422 17521 17522 17523 17524 17525 17526 17527 17550 17649 17650 17679 17777 17807 17904 17905 17906 17936 18033 18065 18161 18162 18194 18201 18202 18203 18204 18205 18245 18246 18247 18248 18290 18323 18328 18329 18334 18335 18373 18419 18451 18456 18464 18465 18468 18469 18470 18471 18501 18548 18580 18583 18584 18594 18595 18596 18597 18600 18601 18602 18603 18630 18677 18709 18711 18733 18734 18757 18758 18767 18806 18837 18839 18840 18863 18864 18885 18935 18966 18967 18994 19012 19013 19064 19065 19094 19095 19123 19124 19140 19141 19155 19194 19223 19253 19254 19268 19269 19323 19383 19396 19397 19452 19512 19513 19524 19525 19543 19544 19581 19643 19644 19645 19646 19647 19648 19649 19650 19651 19652 19710 19804 19839 19933 19934 19969 20066 20068 20069 20098 20227 20329 20330 20356 20461 20485 20590 20614 20720 20721 20850 20872 21001 21110 21130 21239 21259 21517 21646 21756 21757 21886 21887 22016 22033 22162 22274 22275 22291 22420 22548 22662 22677 22792 22806 22921 22935 23050 23064 23179 23193 23437 23451 23567 23580 23696 23709 23825 23838 23954 23967 24083 24095 24096 24224 24341 24353 24470 24482 24599 24611 24728 24740 24858 24868 24869 24988 24997 25118 25119 25125 25126 25248 25249 25250 25251 25252 25253 25254 ];
backgroundInd
L = superpixels(X,241,'IsInputLab',true);

% Convert L*a*b* range to [0 1]
scaledX = prepLab(X);
BW = lazysnapping(scaledX,L,foregroundInd,backgroundInd);

% Create masked image.
maskedImage = RGB;
maskedImage(repmat(~BW,[1 1 3])) = 0;
end

function out = prepLab(in)

% Convert L*a*b* image to range [0,1]
out = in;
out(:,:,1) = in(:,:,1) / 100;  % L range is [0 100].
out(:,:,2) = (in(:,:,2) + 86.1827) / 184.4170;  % a* range is [-86.1827,98.2343].
out(:,:,3) = (in(:,:,3) + 107.8602) / 202.3382;  % b* range is [-107.8602,94.4780].

end
