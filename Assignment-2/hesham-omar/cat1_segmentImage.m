function [BW,maskedImage] = cat1_segmentImage(RGB)
%segmentImage Segment image using auto-generated code from Image Segmenter app
%  [BW,MASKEDIMAGE] = segmentImage(RGB) segments image RGB using
%  auto-generated code from the Image Segmenter app. The final segmentation
%  is returned in BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 04-May-2023
%----------------------------------------------------


% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);

% Graph cut
foregroundInd
backgroundInd = [29 30 31 32 33 34 36 37 194 196 197 206 207 208 209 210 358 359 360 363 386 390 391 392 393 524 525 526 527 558 569 690 691 692 726 727 741 858 895 912 913 1026 1064 1195 1233 1363 1401 1402 1423 1570 1592 1701 1739 1761 1870 1908 1930 2077 2207 2246 2376 2415 2437 2584 2605 2714 2753 2774 2922 2943 3091 3260 3281 3430 3599 3768 3937 3957 4106 4126 4275 4444 4613 4782 4803 4951 5080 5120 5289 5458 5587 5627 5648 5796 5818 5965 6134 6303 6472 6601 6641 6979 7003 7148 7173 7318 7342 7487 7512 7681 7825 7851 7953 8020 8021 8164 8190 8333 8360 8629 8671 8698 8840 8868 9037 9178 9207 9376 9517 9545 9686 9715 9855 9884 10024 10054 10193 10223 10319 10363 10392 10532 10562 10731 10870 10900 11070 11208 11239 11333 11377 11408 11409 11547 11578 11716 11748 11749 11750 11751 11885 11920 11921 11922 12055 12092 12093 12094 12224 12263 12264 12265 12393 12436 12563 12606 12608 12609 12732 12778 12779 12780 12781 12782 12901 12951 12952 12953 13071 13192 13240 13294 13295 13410 13464 13465 13466 13579 13635 13636 13749 13806 13807 13918 13976 13977 14088 14146 14147 14257 14316 14317 14487 14488 14489 14659 14660 14765 14766 14830 14831 14935 15000 15001 15104 15105 15170 15171 15270 15271 15274 15340 15440 15441 15442 15443 15444 15509 15510 15558 15585 15586 15587 15588 15589 15590 15593 15594 15595 15596 15597 15598 15599 15600 15602 15607 15609 15612 15613 15614 15679 15754 15923 16017 16092 16186 16261 16356 16357 16358 16359 16403 16430 16599 16600 16702 16769 16872 16873 17042 17043 17107 17212 17213 17214 17215 17216 17217 17276 17386 17387 17445 17556 17615 17725 17784 17785 17894 17954 17955 18124 18125 18232 18294 18295 18464 18465 18570 18634 18769 18803 18908 18972 18973 19077 19142 19311 19480 19584 19649 19753 19818 19922 19988 20157 20326 20664 20767 20797 20833 20936 21002 21105 21171 21340 21412 21413 21414 21415 21416 21417 21418 21419 21420 21421 21422 21429 21430 21431 21432 21433 21434 21435 21436 21437 21438 21439 21473 21509 21579 21580 21581 21594 21595 21596 21597 21608 21609 21610 21611 21678 21748 21847 21917 22016 22086 22185 22255 22353 22354 22425 22426 22427 22428 22429 22522 22598 22599 22600 22690 22691 22770 22771 22859 22940 22994 23027 23028 23109 23196 23279 23364 23365 23532 23533 23618 23700 23701 23789 23868 23869 23958 24008 24037 24128 24204 24298 24373 24467 24515 24541 24542 24636 24709 24710 24805 24878 24974 25046 25191 25215 25312 25383 25481 25552 25650 25720 25819 25867 25889 25988 26058 26157 26205 26227 26325 26326 26374 26396 26494 26565 26566 26662 26663 26712 26735 26829 26830 26831 26881 26905 26906 26991 26992 26993 26994 26995 26996 26997 27050 27075 27076 27077 27154 27155 27156 27157 27158 27159 27219 27246 27247 27248 27249 27250 27251 27300 27301 27302 27303 27304 27305 27306 27307 27308 27309 27310 27311 27312 27313 27314 27315 27316 27318 27320 27321 27322 27388 27421 27422 27423 27424 27425 27426 27427 27458 27459 27460 27462 27463 27464 27465 27466 27467 27468 27557 27597 27598 27599 27600 27601 27602 27603 27604 27605 27606 27607 27608 27609 27611 27612 27613 27614 27615 27616 27617 27618 27619 27620 27621 27622 27623 27624 27625 27626 27627 27726 27895 28064 28233 28402 28570 28739 28908 29077 29415 29583 29752 29921 30090 30259 30428 30597 30765 30934 31272 31948 32116 32623 32792 33299 33468 33469 33470 33471 33472 33473 ];
L = superpixels(X,271,'IsInputLab',true);

% Convert L*a*b* range to [0 1]
scaledX = prepLab(X);
BW = lazysnapping(scaledX,L,foregroundInd,backgroundInd);

% Create masked image.
maskedImage = RGB;
maskedImage(repmat(~BW,[1 1 3])) = 0;
end

function out = prepLab(in)

% Convert L*a*b* image to range [0,1]
out = in;
out(:,:,1) = in(:,:,1) / 100;  % L range is [0 100].
out(:,:,2) = (in(:,:,2) + 86.1827) / 184.4170;  % a* range is [-86.1827,98.2343].
out(:,:,3) = (in(:,:,3) + 107.8602) / 202.3382;  % b* range is [-107.8602,94.4780].

end
