function [BW,maskedImage] = hand_segmentImage(RGB)
%segmentImage Segment image using auto-generated code from Image Segmenter app
%  [BW,MASKEDIMAGE] = segmentImage(RGB) segments image RGB using
%  auto-generated code from the Image Segmenter app. The final segmentation
%  is returned in BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 04-May-2023
%----------------------------------------------------


% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);

% Graph cut
foregroundInd
backgroundInd = [132 567 568 727 785 945 1002 1003 1220 1381 1437 1599 1817 1872 2035 2090 2253 2307 2471 2525 2689 2742 2906 2960 3123 3178 3341 3558 3613 3774 3775 3830 3831 3991 4048 4207 4208 4265 4425 4483 4642 4701 4859 4919 5076 5136 5294 5510 5511 5571 5788 5945 6163 6223 6380 6440 6597 6598 6814 6815 6875 7032 7093 7249 7250 7310 7467 7528 7684 7685 7745 7746 7902 7963 8120 8181 8338 8398 8555 8616 8773 8833 8834 8990 8991 9051 9208 9269 9425 9487 9643 9704 9859 9860 9922 10076 10077 10140 10293 10358 10509 10510 10576 10725 10726 10727 10793 10794 10943 11011 11160 11228 11229 11378 11446 11595 11664 11812 11881 11882 12029 12030 12099 12246 12247 12316 12464 12534 12680 12681 12751 12752 12897 12969 13114 13186 13187 13331 13404 13549 13622 13766 13840 13983 14058 14199 14200 14415 14416 14493 14632 14633 14711 14850 15067 15146 15285 15502 15720 15799 15937 16017 16155 16373 16452 16591 16670 16839 16840 16841 16888 17055 17056 17059 17105 17273 17277 17323 17463 17489 17490 17495 17681 17706 17713 17759 17923 17932 17976 18117 18140 18150 18335 18357 18358 18369 18412 18553 18575 18588 18629 18771 18793 18806 18846 18847 18989 19011 19024 19025 19064 19207 19229 19243 19282 19425 19447 19461 19462 19499 19643 19665 19680 19681 19717 19861 19862 19883 19899 19900 19901 19914 19915 19916 19934 19935 20080 20101 20119 20120 20121 20130 20131 20132 20134 20152 20298 20319 20341 20342 20344 20345 20346 20347 20352 20370 20516 20537 20570 20588 20734 20755 20756 20788 20806 20953 20974 21006 21024 21171 21192 21224 21242 21389 21410 21441 21460 21461 21607 21608 21628 21659 21679 21826 21846 21877 21897 22044 22095 22115 22262 22282 22313 22334 22480 22501 22531 22552 22698 22719 22749 22770 22916 22937 22967 22988 22989 23134 23155 23207 23352 23373 23403 23425 23570 23591 23621 23644 23788 23809 23839 23862 24006 24027 24058 24080 24224 24245 24276 24298 24299 24442 24463 24494 24517 24660 24681 24712 24713 24735 24878 24899 24930 24931 24954 25096 25117 25143 25144 25145 25146 25147 25148 25172 25314 25335 25355 25356 25357 25358 25359 25360 25390 25532 25553 25571 25572 25573 25608 25750 25771 25789 25826 25827 25968 25989 26007 26045 26186 26207 26225 26263 26404 26425 26442 26443 26481 26622 26643 26660 26699 26840 26861 26878 26917 27058 27079 27096 27135 27297 27314 27354 27515 27531 27532 27573 27733 27749 27791 27951 27952 27967 28009 28010 28011 28012 28013 28014 28148 28170 28185 28232 28233 28234 28235 28388 28389 28403 28453 28454 28607 28608 28672 28673 28826 28838 28839 28891 28892 29044 29056 29110 29111 29263 29274 29329 29481 29482 29483 29492 29548 29702 29703 29704 29705 29706 29708 29709 29766 29927 29984 29985 30203 30421 30639 30858 30982 31076 31295 31513 31636 31731 31854 31949 32167 32168 32386 32604 32822 32945 32946 33040 33258 33476 33605 33694 33827 33912 34045 34046 34130 34348 34488 34489 34566 34784 35002 35220 35221 35365 35366 35439 35584 35658 35803 35804 35876 36095 36313 36314 36461 36532 36533 36680 36751 36899 36970 37117 37118 37119 37189 37190 37337 37408 37555 37556 37627 37774 37775 37845 37846 37993 38064 38212 38213 38283 38431 38432 38501 38650 38720 38869 38938 39087 39156 39157 39375 39594 39812 39963 40031 40181 40182 40249 40400 40401 40467 40468 40619 40620 40686 40838 40904 41057 41123 41275 41276 41341 41494 41559 41713 41778 41932 41996 42150 42214 42215 42369 42433 42587 42651 42806 42869 43024 43025 43088 43243 43306 43461 43462 43524 43680 43743 43898 43899 43961 44179 44336 44554 44615 44616 44773 44991 44992 45052 45210 45428 45429 45489 45647 45866 45926 46084 46085 46144 46303 46362 46363 46521 46522 46581 46740 46799 46959 ];
L = superpixels(X,337,'IsInputLab',true);

% Convert L*a*b* range to [0 1]
scaledX = prepLab(X);
BW = lazysnapping(scaledX,L,foregroundInd,backgroundInd);

% Create masked image.
maskedImage = RGB;
maskedImage(repmat(~BW,[1 1 3])) = 0;
end

function out = prepLab(in)

% Convert L*a*b* image to range [0,1]
out = in;
out(:,:,1) = in(:,:,1) / 100;  % L range is [0 100].
out(:,:,2) = (in(:,:,2) + 86.1827) / 184.4170;  % a* range is [-86.1827,98.2343].
out(:,:,3) = (in(:,:,3) + 107.8602) / 202.3382;  % b* range is [-107.8602,94.4780].

end
